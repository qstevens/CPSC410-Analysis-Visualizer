func main() {
    fun(d, g, a)
}

func 26Lines() {
    fun(d)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)

}

func fun(n) {
    recursive()
    101Lines()
}

func fun2() {
    26Lines()
    fun2()
}

func fun(n, m, p) {
    26Lines()
}

func loneNode(){
}

func recursive(){
    recursive()
}

func 51Lines(){
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
}

func 101Lines(){
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
    fun(n, m, p)
}